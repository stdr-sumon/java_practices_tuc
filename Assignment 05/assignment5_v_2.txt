
/*
Online Java - IDE, Code Editor, Compiler

Online Java is a quick and easy tool that helps you to build, compile, test your programs online.
*/


/*
Online Java - IDE, Code Editor, Compiler

Online Java is a quick and easy tool that helps you to build, compile, test your programs online.
*/

public class Main
{   
    public static String[] getNGrams(String str, int len){
        int size = str.length();
        int arlen = 1;
        if(len<=size)
        {
            arlen = 1 + ( size - len);
        }
        String[] star = new String[arlen];
        if(len<=size)
        {
            int index=0;
            for(int i = 0; i<=size-len; i++ )
            {
                String S = "";
                for(int j = i; j<i+len; j++) {
                    S = S + str.charAt(j);

                }
                star[index] = S;
                index++;

            }


        }
        if(len> size)
        {
             int characterToappend = len - size;
             for(int i = 0; i<characterToappend; i++)
             {
                 str = str + '*';
             }
             star[0] = str;

        }

        return star;
    }
    
    public static String[] getShared(String[] arr1NGrams, String[] arr2NGrams) 
    {
        int sharedArrLen = 0;
        for(int  i = 0 ; i < arr1NGrams.length; i++)
        {
            for(int  j = 0 ; j < arr2NGrams.length; j++)
            {
                if (arr1NGrams[i].equals(arr2NGrams[j])) 
                {
                    sharedArrLen++;
                }
            }
        }
        
        if (sharedArrLen > 0) {
            String[] sharedGrams = new String[sharedArrLen];
            int shrIndx = 0;
            for(int  i = 0 ; i < arr1NGrams.length; i++)
            {
                for(int  j = 0 ; j < arr2NGrams.length; j++)
                {
                    if (arr1NGrams[i].equals(arr2NGrams[j])) 
                    {
                        sharedGrams[shrIndx] = arr1NGrams[i];
                        shrIndx++;
                    }
                }
            }
            return sharedGrams;
        } else {
            String[] emptyArr = {};

            return emptyArr;
        }
    }
    
    public static double getDistance(String[] arr1NGrams, String[] arr2NGrams) 
    {
        String[] sharedArray = getShared(arr1NGrams, arr2NGrams);
        return (double) sharedArray.length / (arr1NGrams.length + arr2NGrams.length);
    }
    
    public static boolean isRelevant(String keyword, String text) 
    {
        int len = 3;
        double leastDistance = 0.0;
        String[] keywordNGrams = getNGrams(keyword, len);
        String[] textSplit = text.split(" ");
        double[] arrDist = new double[textSplit.length];
        
        for(int  i = 0 ; i < textSplit.length; i++)
        {
            String[] textSplitNGrams = getNGrams(textSplit[i], len);
            arrDist[i] = (double) getDistance(keywordNGrams, textSplitNGrams);
            if (i > 0 && arrDist[i - 1] > 0.4) {
                arrDist[i] = arrDist[i - 1];
                leastDistance = arrDist[i];
            }
        }
        
        if (leastDistance > 0.4) {
            return true;
        } else {
            return false;
        }
    }
    
    public static void main(String[] args)
    {
        String[] houseNGrams = getNGrams("house", 3);
        String[] trousersNGrams = getNGrams("trousers", 3);
        String strShared = "";
        
        String[] sharedArr = getShared(houseNGrams, trousersNGrams);
        double arrDist = getDistance (houseNGrams, trousersNGrams);
        
        boolean isRelevant = isRelevant("house", "the house is clean");
        
        System.out.println(isRelevant);
    }
}